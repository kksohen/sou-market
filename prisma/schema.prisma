generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
/* prisma schema 작성: npx prisma migrate dev로 수정사항 업데이트 */
model User{
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  phone String? @unique
  github_id String? @unique
  google_id String? @unique
  kakao_id String? @unique
  naver_id String? @unique
  avatar String? 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tokens      SMSToken[]
  products    Product[]
  posts       Post[]
  comments Comment[]
  likes       Like[]
  chat_rooms ChatRoom[]
  messages Message[]
  live_streams LiveStream[]
}

model SMSToken{
  id Int @id @default(autoincrement())
  token String @unique
  phone String? @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) //cascade: user 데이터 삭제시 token도 함께 삭제하겠다는 의미
  userId Int
}

model Product{
  id Int @id @default(autoincrement())
  title String
  price Float
  description String
  photo String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  chat_rooms ChatRoom[]
}

model Post{
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  comments Comment[]
  likes Like[]
}

model Comment{
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like{
  @@id(name:"id", [userId, postId])//userId와 postId의 조합(key로 사용)을 보고 unique한지 판별

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model ChatRoom{
  id String @id @default(cuid()) //cuid: unique한 chatRoomId 생성(보안ㅇ)
  user User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  messages Message[]
  product Product @relation(fields: [productId], references: [id])
  productId Int

  status Boolean @default(false) //채팅방 상태
}

model Message{
  id Int @id @default(autoincrement())
  payload String
  is_read Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoomId String
  userId Int
}

model LiveStream{
  id Int @id @default(autoincrement())
  title String
  stream_key String
  stream_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}